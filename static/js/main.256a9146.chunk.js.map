{"version":3,"sources":["contracts/marketplace_approval.teal","contracts/marketplace_clear.teal","utils/conversions.js","components/Cover.jsx","components/Identicon.jsx","components/Wallet.jsx","components/marketplace/AddProduct.jsx","components/marketplace/Product.jsx","components/utils/Loader.jsx","components/utils/Notifications.jsx","components/marketplace/Products.jsx","assets/img/sandwich.jpg","App.js","reportWebVitals.js","index.js","utils/marketplace.js","utils/constants.js"],"names":["base64ToUTF8String","base64String","Buffer","from","toString","utf8ToBase64String","utf8String","truncateAddress","address","slice","length","microAlgosToString","num","BigNumber","shiftedBy","ALGORAND_DECIMALS","toFixed","stringToMicroAlgos","str","toNumber","Cover","name","coverImg","connect","className","style","maxWidth","src","alt","Button","onClick","variant","Identicon","size","rest","width","height","diameter","seed","parseInt","Wallet","amount","symbol","disconnect","Dropdown","Toggle","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","AddProduct","createProduct","useState","setName","image","setImage","description","setDescription","price","setPrice","isFormFilled","useCallback","show","setShow","handleClose","Modal","onHide","centered","Header","closeButton","Title","Form","Body","FloatingLabel","controlId","label","Control","type","onChange","e","value","placeholder","Footer","disabled","Product","product","buyProduct","deleteProduct","sold","appId","owner","count","setCount","Col","Card","Badge","bg","objectFit","Text","min","max","Number","Loader","role","Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","NotificationError","DefaultProps","defaultProps","Products","fetchBalance","products","setProducts","loading","setLoading","getProducts","getProductsAction","then","catch","error","console","log","finally","_","useEffect","data","createProductAction","toast","buyProductAction","deleteProductAction","Row","xs","sm","lg","map","index","App","setAddress","balance","setBalance","accountAddress","indexerClient","lookupAccountByID","do","response","_balance","account","connectWallet","myAlgoConnect","accounts","_account","Container","fluid","Nav","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","this","compileProgram","programSource","encoder","TextEncoder","programBytes","encode","algodClient","compile","compileResponse","Uint8Array","result","senderAddress","getTransactionParams","params","fee","algosdk","ALGORAND_MIN_TX_FEE","flatFee","approvalProgram","compiledApprovalProgram","clearProgram","compiledClearProgram","note","marketplaceNote","encodeUint64","appArgs","txn","makeApplicationCreateTxnFromObject","suggestedParams","onComplete","OnApplicationComplete","NoOpOC","numLocalInts","numLocalByteSlices","numLocalBytes","numGlobalInts","numGlobalByteSlices","numGlobalBytes","txId","txID","signTransaction","toByte","signedTxn","sendRawTransaction","blob","waitForConfirmation","confirmedTxn","pendingTransactionInformation","transactionResponse","buyArg","countArg","appCallTxn","makeApplicationCallTxnFromObject","appIndex","paymentTxn","makePaymentTxnWithSuggestedParamsFromObject","to","txnArray","groupID","computeGroupID","i","group","tx","makeApplicationDeleteTxnFromObject","apid","encodedNote","searchForTransactions","notePrefix","txType","minRound","transactionInfo","transactions","transaction","getApplication","push","lookupApplications","includeAll","application","deleted","globalState","creator","getField","fieldName","find","state","key","undefined","field","bytes","uint","config","Algodv2","Indexer","MyAlgoConnect"],"mappings":"0JAAe,4sC,mCCAA,0C,2ECAf,mNAGaA,EAAqB,SAACC,GACjC,OAAOC,EAAOC,KAAKF,EAAc,UAAUG,SAAS,QACrD,EAEYC,EAAqB,SAACC,GACjC,OAAOJ,EAAOC,KAAKG,EAAY,QAAQF,SAAS,SACjD,EAGYG,EAAkB,SAACC,GAC9B,GAAKA,EACL,OACEA,EAAQC,MAAM,EAAG,GACjB,MACAD,EAAQC,MAAMD,EAAQE,OAAS,EAAGF,EAAQE,OAE7C,EAGYC,EAAqB,SAACC,GACjC,GAAKA,EAEL,OADgB,IAAIC,IAAUD,GACbE,WAAWC,KAAmBC,QAAQ,EACxD,EAGYC,EAAqB,SAACC,GACjC,GAAKA,EAEL,OADgB,IAAIL,IAAUK,GACbJ,UAAUC,KAAmBI,UAC/C,C,yYCEcC,EA/BD,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QAC/B,OACE,sBAAKC,UAAU,4EAAf,UACE,sBAAKA,UAAU,0BAAf,UACE,qBACEA,UAAU,gCACVC,MAAO,CAAEC,SAAU,SAFrB,SAIE,qBAAKC,IAAKL,EAAUM,IAAI,OAE1B,6BAAKP,IACL,wEACA,cAACQ,EAAA,EAAD,CACEC,QAAS,kBAAMP,GAAN,EACTQ,QAAQ,gBACRP,UAAU,yBAHZ,+BAQF,mBAAGA,UAAU,yBAAb,mCAGL,E,wFCbcQ,EAXG,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMzB,EAAT,EAASA,QAAY0B,EAArB,wBAChB,+CAASA,GAAT,IAAeT,MAAO,CAAEU,MAAM,GAAD,OAAKF,EAAL,MAAeG,OAAO,GAAD,OAAKH,EAAL,OAAlD,SACE,cAAC,IAAD,CAAUI,SAAUJ,EAAMK,KAAMC,SAAS/B,EAAQC,MAAM,EAAG,IAAK,QAFjD,ECmEH+B,EAhEA,SAAC,GAAmD,IAAjDhC,EAAgD,EAAhDA,QAASa,EAAuC,EAAvCA,KAAMoB,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,WAC/C,OAAKnC,EAIH,mCACE,eAACoC,EAAA,EAAD,WACE,eAACA,EAAA,EAASC,OAAV,CACEd,QAAQ,QACRe,MAAM,MACNC,GAAG,iBACHvB,UAAU,qDAJZ,UAMGiB,EACC,qCACG9B,YAAmB8B,GACpB,uBAAMjB,UAAU,OAAhB,cAAyBkB,QAG3B,cAACM,EAAA,EAAD,CAASC,UAAU,SAAShB,KAAK,KAAKT,UAAU,eAElD,cAAC,EAAD,CAAWhB,QAASA,EAASyB,KAAM,GAAIT,UAAU,iBAGnD,eAACoB,EAAA,EAASM,KAAV,CAAe1B,UAAU,qBAAzB,UACE,cAACoB,EAAA,EAASO,KAAV,CACEC,KAAI,kDAA6C5C,GACjD6C,OAAO,SAFT,SAIE,eAACC,EAAA,EAAD,CAAOC,UAAU,aAAaC,IAAK,EAAnC,UACE,mBAAGhC,UAAU,6BACb,sBAAKA,UAAU,qBAAf,UACGH,GAAQ,sBAAMG,UAAU,iBAAhB,SAAkCH,IAC3C,sBAAMG,UAAU,iBAAhB,SACGjB,YAAgBC,aAKzB,cAACoC,EAAA,EAASa,QAAV,IACA,eAACb,EAAA,EAASO,KAAV,CACEO,GAAG,SACHlC,UAAU,4BACVM,QAAS,WACPa,GACD,EALH,UAOE,mBAAGnB,UAAU,oCAPf,wBAtCC,IAoDV,E,qDC4DcmC,EAnHI,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACpB,EAAwBC,mBAAS,IAAjC,mBAAOxC,EAAP,KAAayC,EAAb,KACA,EAA0BD,mBAAS,IAAnC,mBAAOE,EAAP,KAAcC,EAAd,KACA,EAAsCH,mBAAS,IAA/C,mBAAOI,EAAP,KAAoBC,EAApB,KACA,EAA0BL,mBAAS,GAAnC,mBAAOM,EAAP,KAAcC,EAAd,KAEMC,EAAeC,uBAAY,WAC/B,OAAOjD,GAAQ0C,GAASE,GAAeE,EAAQ,CAChD,GAAE,CAAC9C,EAAM0C,EAAOE,EAAaE,IAE9B,EAAwBN,oBAAS,GAAjC,mBAAOU,EAAP,KAAaC,EAAb,KAEMC,EAAc,kBAAMD,GAAQ,EAAd,EAEpB,OACE,qCACE,cAAC3C,EAAA,EAAD,CACEC,QAJa,kBAAM0C,GAAQ,EAAd,EAKbzC,QAAQ,OACRP,UAAU,oBACVC,MAAO,CAAEU,MAAO,QAJlB,SAME,mBAAGX,UAAU,iBAEf,eAACkD,EAAA,EAAD,CAAOH,KAAMA,EAAMI,OAAQF,EAAaG,UAAQ,EAAhD,UACE,cAACF,EAAA,EAAMG,OAAP,CAAcC,aAAW,EAAzB,SACE,cAACJ,EAAA,EAAMK,MAAP,4BAEF,cAACC,EAAA,EAAD,UACE,eAACN,EAAA,EAAMO,KAAP,WACE,cAACC,EAAA,EAAD,CACEC,UAAU,YACVC,MAAM,eACN5D,UAAU,OAHZ,SAKE,cAACwD,EAAA,EAAKK,QAAN,CACEC,KAAK,OACLC,SAAU,SAACC,GACT1B,EAAQ0B,EAAEnC,OAAOoC,MAClB,EACDC,YAAY,4BAGhB,cAACR,EAAA,EAAD,CACEC,UAAU,WACVC,MAAM,YACN5D,UAAU,OAHZ,SAKE,cAACwD,EAAA,EAAKK,QAAN,CACEC,KAAK,OACLI,YAAY,YACZD,MAAO1B,EACPwB,SAAU,SAACC,GACTxB,EAASwB,EAAEnC,OAAOoC,MACnB,MAGL,cAACP,EAAA,EAAD,CACEC,UAAU,mBACVC,MAAM,cACN5D,UAAU,OAHZ,SAKE,cAACwD,EAAA,EAAKK,QAAN,CACE3B,GAAG,WACHgC,YAAY,cACZjE,MAAO,CAAEW,OAAQ,QACjBmD,SAAU,SAACC,GACTtB,EAAesB,EAAEnC,OAAOoC,MACzB,MAGL,cAACP,EAAA,EAAD,CACEC,UAAU,aACVC,MAAM,gBACN5D,UAAU,OAHZ,SAKE,cAACwD,EAAA,EAAKK,QAAN,CACEC,KAAK,OACLI,YAAY,QACZH,SAAU,SAACC,GACTpB,EAASnD,YAAmBuE,EAAEnC,OAAOoC,OACtC,WAKT,eAACf,EAAA,EAAMiB,OAAP,WACE,cAAC9D,EAAA,EAAD,CAAQE,QAAQ,oBAAoBD,QAAS2C,EAA7C,mBAGA,cAAC5C,EAAA,EAAD,CACEE,QAAQ,OACR6D,UAAWvB,IACXvC,QAAS,WACP8B,EAAc,CACZvC,OACA0C,QACAE,cACAE,UAEFM,GACD,EAXH,kCAmBT,E,2BC7BcoB,EAvEC,SAAC,GAAqD,IAAnDrF,EAAkD,EAAlDA,QAASsF,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cACvC3E,EAAwDyE,EAAxDzE,KAAM0C,EAAkD+B,EAAlD/B,MAAOE,EAA2C6B,EAA3C7B,YAAaE,EAA8B2B,EAA9B3B,MAAO8B,EAAuBH,EAAvBG,KAAMC,EAAiBJ,EAAjBI,MAAOC,EAAUL,EAAVK,MAEtD,EAA0BtC,mBAAS,GAAnC,mBAAOuC,EAAP,KAAcC,EAAd,KAEA,OACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAM/E,UAAU,QAAhB,UACE,cAAC+E,EAAA,EAAK1B,OAAN,UACE,eAACvB,EAAA,EAAD,CAAOC,UAAU,aAAaC,IAAK,EAAnC,UACE,sBAAMhC,UAAU,gCAAhB,SACGjB,YAAgB4F,KAEnB,cAAC,EAAD,CAAWlE,KAAM,GAAIzB,QAAS2F,IAC9B,eAACK,EAAA,EAAD,CAAOC,GAAG,YAAYjF,UAAU,UAAhC,UACGyE,EADH,gBAKJ,qBAAKzE,UAAU,kBAAf,SACE,qBAAKG,IAAKoC,EAAOnC,IAAKP,EAAMI,MAAO,CAAEiF,UAAW,aAElD,eAACH,EAAA,EAAKtB,KAAN,CAAWzD,UAAU,iCAArB,UACE,cAAC+E,EAAA,EAAKxB,MAAN,UAAa1D,IACb,cAACkF,EAAA,EAAKI,KAAN,CAAWnF,UAAU,cAArB,SAAoCyC,IACpC,eAACe,EAAA,EAAD,CAAMxD,UAAU,8CAAhB,UACE,cAAC0D,EAAA,EAAD,CACEC,UAAU,aACVC,MAAM,QACN5D,UAAU,OAHZ,SAKE,cAACwD,EAAA,EAAKK,QAAN,CACEC,KAAK,SACLG,MAAOW,EACPQ,IAAI,IACJC,IAAI,KACJtB,SAAU,SAACC,GACTa,EAASS,OAAOtB,EAAEnC,OAAOoC,OAC1B,MAGL,eAAC5D,EAAA,EAAD,CACEE,QAAQ,eACRD,QAAS,kBAAMiE,EAAWD,EAASM,EAA1B,EACT5E,UAAU,YAHZ,qBAKWb,YAAmBwD,GAASiC,EALvC,WAOCN,EAAQK,QAAU3F,GACjB,cAACqB,EAAA,EAAD,CACEE,QAAQ,iBACRD,QAAS,kBAAMkE,EAAcF,EAApB,EACTtE,UAAU,MAHZ,SAKE,mBAAGA,UAAU,4BAhDf0E,EAwDb,ECjEca,EARA,kBACb,qBAAKvF,UAAU,gCAAf,SACE,cAACwB,EAAA,EAAD,CAASC,UAAU,SAAS+D,KAAK,SAASxF,UAAU,aAApD,SACE,sBAAMA,UAAU,kBAAhB,2BAHS,ECCTyF,EAAe,kBACnB,cAAC,IAAD,CACEC,SAAS,gBACTC,UAAW,IACXC,iBAAe,EACfC,aAAW,EACXC,cAAY,EACZC,KAAK,EACLC,kBAAgB,EAChBC,WAAW,EACXC,cAAY,GAVK,EAcfC,EAAsB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAC1B,gCACE,mBAAGpG,UAAU,8CACb,sBAAMA,UAAU,sBAAhB,SAAuCoG,MAHf,EAOtBC,EAAoB,SAAC,GAAD,IAAGD,EAAH,EAAGA,KAAH,OACxB,gCACE,mBAAGpG,UAAU,yCACb,sBAAMA,UAAU,sBAAhB,SAAuCoG,MAHjB,EAWpBE,EAAe,CACnBF,KAAM,IAIRD,EAAoBI,aAAeD,EAGnCD,EAAkBE,aAAeD,E,qBCsElBE,EAnGE,SAAC,GAA+B,IAA7BxH,EAA4B,EAA5BA,QAASyH,EAAmB,EAAnBA,aAC3B,EAAgCpE,mBAAS,IAAzC,mBAAOqE,EAAP,KAAiBC,EAAjB,KACA,EAA8BtE,oBAAS,GAAvC,mBAAOuE,EAAP,KAAgBC,EAAhB,KAEMC,EAAW,iDAAG,wFAClBD,GAAW,GACXE,cACGC,MAAK,SAACN,GACDA,GACFC,EAAYD,EAEf,IACAO,OAAM,SAACC,GACNC,QAAQC,IAAIF,EACb,IACAG,SAAQ,SAACC,GACRT,GAAW,EACZ,IAbe,2CAAH,qDAgBjBU,qBAAU,WACRT,GACD,GAAE,IAEH,IAAM1E,EAAa,iDAAG,WAAOoF,GAAP,2EACpBX,GAAW,GACXY,YAAoBzI,EAASwI,GAC1BR,MAAK,WACJU,YAAM,cAAC,EAAD,CAAqBtB,KAAK,iCAChCU,IACAL,EAAazH,EACd,IACAiI,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZQ,YAAM,cAAC,EAAD,CAAmBtB,KAAK,iCAC9BS,GAAW,EACZ,IAZiB,2CAAH,sDAebtC,EAAU,iDAAG,WAAOD,EAASM,GAAhB,2EACjBiC,GAAW,GACXc,YAAiB3I,EAASsF,EAASM,GAChCoC,MAAK,WACJU,YAAM,cAAC,EAAD,CAAqBtB,KAAK,iCAChCU,IACAL,EAAazH,EACd,IACAiI,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZQ,YAAM,cAAC,EAAD,CAAmBtB,KAAK,iCAC9BS,GAAW,EACZ,IAZc,2CAAH,wDAeVrC,EAAa,iDAAG,WAAOF,GAAP,2EACpBuC,GAAW,GACXe,YAAoB5I,EAASsF,EAAQI,OAClCsC,MAAK,WACJU,YAAM,cAAC,EAAD,CAAqBtB,KAAK,kCAChCU,IACAL,EAAazH,EACd,IACAiI,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZQ,YAAM,cAAC,EAAD,CAAmBtB,KAAK,+BAC9BS,GAAW,EACZ,IAZiB,2CAAH,sDAcnB,OAAID,EACK,cAAC,EAAD,IAGP,qCACE,sBAAK5G,UAAU,yDAAf,UACE,oBAAIA,UAAU,oBAAd,yBACA,cAAC,EAAD,CAAYoC,cAAeA,OAE7B,cAACyF,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGhI,UAAU,0BAApC,SACE,mCACG0G,EAASuB,KAAI,SAAC3D,EAAS4D,GAAV,OACZ,cAAC,EAAD,CACElJ,QAASA,EACTsF,QAASA,EACTC,WAAYA,EACZC,cAAeA,GACV0D,EANK,UAavB,E,OC3Gc,MAA0B,qCCiF1BC,EAtEH,WACV,MAA8B9F,mBAAS,MAAvC,mBAAOrD,EAAP,KAAgBoJ,EAAhB,KACA,EAAwB/F,mBAAS,MAAjC,mBAAOxC,EAAP,KAAayC,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOgG,EAAP,KAAgBC,EAAhB,KAEM7B,EAAY,iDAAG,WAAO8B,GAAP,2EACnBC,IACGC,kBAAkBF,GAClBG,KACA1B,MAAK,SAAC2B,GACL,IAAMC,EAAWD,EAASE,QAAQ5H,OAClCqH,EAAWM,EACZ,IACA3B,OAAM,SAACC,GACNC,QAAQC,IAAIF,EACb,IAVgB,2CAAH,sDAaZ4B,EAAa,iDAAG,wFACpBC,IACGhJ,UACAiH,MAAK,SAACgC,GACL,IAAMC,EAAWD,EAAS,GAC1BZ,EAAWa,EAASjK,SACpBsD,EAAQ2G,EAASpJ,MACjB4G,EAAawC,EAASjK,QACvB,IACAiI,OAAM,SAACC,GACNC,QAAQC,IAAI,sCACZD,QAAQD,MAAMA,EACf,IAZiB,2CAAH,qDAqBnB,OACE,qCACE,cAAC,EAAD,IACClI,EACC,eAACkK,EAAA,EAAD,CAAWC,MAAM,KAAjB,UACE,cAACC,EAAA,EAAD,CAAKpJ,UAAU,gCAAf,SACE,cAACoJ,EAAA,EAAIzH,KAAL,UACE,cAAC,EAAD,CACE3C,QAASA,EACTa,KAAMA,EACNoB,OAAQoH,EACRlH,WAjBK,WACjBiH,EAAW,MACX9F,EAAQ,MACRgG,EAAW,KACZ,EAcapH,OAAQ,aAId,+BACE,cAAC,EAAD,CAAUlC,QAASA,EAASyH,aAAcA,SAI9C,cAAC,EAAD,CACE5G,KAAM,cACNC,SAAUA,EACVC,QAAS+I,MAKlB,ECnEcO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBvC,MAAK,YAAkD,IAA/CwC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,EACT,GAEJ,E,qBCFDO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,G,qRCDMhF,E,aACJ,WAAYxE,EAAM0C,EAAOE,EAAaE,EAAO8B,EAAMC,EAAOC,GAAQ,oBAChEuF,KAAKrK,KAAOA,EACZqK,KAAK3H,MAAQA,EACb2H,KAAKzH,YAAcA,EACnByH,KAAKvH,MAAQA,EACbuH,KAAKzF,KAAOA,EACZyF,KAAKxF,MAAQA,EACbwF,KAAKvF,MAAQA,CACd,IAKGwF,EAAc,iDAAG,WAAOC,GAAP,4FACjBC,EAAU,IAAIC,YACdC,EAAeF,EAAQG,OAAOJ,GAFb,SAGOK,IAAYC,QAAQH,GAAc7B,KAHzC,cAGjBiC,EAHiB,yBAId,IAAIC,WAAWlM,EAAOC,KAAKgM,EAAgBE,OAAQ,YAJrC,2CAAH,sDAQPpD,EAAmB,iDAAG,WAAOqD,EAAexG,GAAtB,oHACjC6C,QAAQC,IAAI,qBADqB,SAGdqD,IAAYM,uBAAuBrC,KAHrB,cAG7BsC,EAH6B,QAI1BC,IAAMC,IAAQC,oBACrBH,EAAOI,SAAU,EALgB,SAQKjB,EAAekB,KARpB,cAQ3BC,EAR2B,iBASEnB,EAAeoB,KATjB,eAS3BC,EAT2B,OAY7BC,GAAO,IAAInB,aAAcE,OAAOkB,KAChC7L,GAAO,IAAIyK,aAAcE,OAAOlG,EAAQzE,MACxC0C,GAAQ,IAAI+H,aAAcE,OAAOlG,EAAQ/B,OACzCE,GAAc,IAAI6H,aAAcE,OAAOlG,EAAQ7B,aAC/CE,EAAQuI,IAAQS,aAAarH,EAAQ3B,OAErCiJ,EAAU,CAAC/L,EAAM0C,EAAOE,EAAaE,GAGrCkJ,EAAMX,IAAQY,mCAAmC,CACnDnN,KAAMmM,EACNiB,gBAAiBf,EACjBgB,WAAYd,IAAQe,sBAAsBC,OAC1Cb,gBAAiBC,EACjBC,aAAcC,EACdW,aAAcA,IACdC,mBAAoBC,IACpBC,cAAeA,IACfC,oBAAqBC,IACrBf,KAAMA,EACNG,QAASA,IAIPa,EAAOZ,EAAIa,OAAO9N,WApCW,UAuCXmK,IAAc4D,gBAAgBd,EAAIe,UAvCvB,eAuC7BC,EAvC6B,OAwCjC1F,QAAQC,IAAI,mCAAoCqF,GAxCf,UAyC3BhC,IAAYqC,mBAAmBD,EAAUE,MAAMrE,KAzCpB,yBA4CRwC,IAAQ8B,oBAAoBvC,IAAagC,EAAM,GA5CvC,eA4C7BQ,EA5C6B,OA+CjC9F,QAAQC,IACN,eACEqF,EACA,uBACAQ,EAAa,oBAnDgB,UAuDDxC,IAC7ByC,8BAA8BT,GAC9B/D,KAzD8B,eAuD7ByE,EAvD6B,OA0D7BzI,EAAQyI,EAAoB,qBAChChG,QAAQC,IAAI,uBAAwB1C,GA3DH,kBA4D1BA,GA5D0B,4CAAH,wDAiEnBiD,EAAgB,iDAAG,WAAOmD,EAAexG,EAASM,GAA/B,8GAC9BuC,QAAQC,IAAI,qBADkB,SAGXqD,IAAYM,uBAAuBrC,KAHxB,OAiC9B,KA9BIsC,EAH0B,QAIvBC,IAAMC,IAAQC,oBACrBH,EAAOI,SAAU,EAGbgC,GAAS,IAAI9C,aAAcE,OAAO,OAClC6C,EAAWnC,IAAQS,aAAa/G,GAChCgH,EAAU,CAACwB,EAAQC,GAGnBC,EAAapC,IAAQqC,iCAAiC,CACxD5O,KAAMmM,EACN0C,SAAUlJ,EAAQI,MAClBsH,WAAYd,IAAQe,sBAAsBC,OAC1CH,gBAAiBf,EACjBY,QAASA,IAIP6B,EAAavC,IAAQwC,4CAA4C,CACnE/O,KAAMmM,EACN6C,GAAIrJ,EAAQK,MACZ1D,OAAQqD,EAAQ3B,MAAQiC,EACxBmH,gBAAiBf,IAGf4C,EAAW,CAACN,EAAYG,GAGxBI,EAAU3C,IAAQ4C,eAAeF,GAC5BG,EAAI,EAAGA,EAAI,EAAGA,IAAKH,EAASG,GAAGC,MAAQH,EAjClB,iBAoCR9E,IAAc4D,gBAClCiB,EAAS3F,KAAI,SAAC4D,GAAD,OAASA,EAAIe,QAAb,KArCe,eAoC1BC,EApC0B,OAuC9B1F,QAAQC,IAAI,4BAvCkB,UAwCfqD,IACZqC,mBAAmBD,EAAU5E,KAAI,SAAC4D,GAAD,OAASA,EAAIkB,IAAb,KACjCrE,KA1C2B,eAwC1BuF,EAxC0B,iBA6CL/C,IAAQ8B,oBAAoBvC,IAAawD,EAAGxB,KAAM,GA7C7C,QA6C1BQ,EA7C0B,OAgD9B9F,QAAQC,IACN,qBACE6G,EAAGxB,KACH,uBACAQ,EAAa,oBApDa,4CAAH,0DA0DhBrF,EAAmB,iDAAG,WAAOkD,EAAe5C,GAAtB,oGACjCf,QAAQC,IAAI,2BADqB,SAGdqD,IAAYM,uBAAuBrC,KAHrB,cAG7BsC,EAH6B,QAI1BC,IAAMC,IAAQC,oBACrBH,EAAOI,SAAU,EAGbS,EAAMX,IAAQgD,mCAAmC,CACnDvP,KAAMmM,EACNiB,gBAAiBf,EACjBwC,SAAUtF,IAIRuE,EAAOZ,EAAIa,OAAO9N,WAfW,UAkBXmK,IAAc4D,gBAAgBd,EAAIe,UAlBvB,eAkB7BC,EAlB6B,OAmBjC1F,QAAQC,IAAI,mCAAoCqF,GAnBf,UAoB3BhC,IAAYqC,mBAAmBD,EAAUE,MAAMrE,KApBpB,yBAuBNwC,IAAQ8B,oBAAoBvC,IAAagC,EAAM,GAvBzC,eAuB3BQ,EAvB2B,OA0BjC9F,QAAQC,IACN,eACEqF,EACA,uBACAQ,EAAa,oBA9BgB,UAkCDxC,IAC7ByC,8BAA8BT,GAC9B/D,KApC8B,QAkC7ByE,EAlC6B,OAqC7BzI,EAAQyI,EAAmB,IAAnB,IAAkCgB,KAC9ChH,QAAQC,IAAI,mBAAoB1C,GAtCC,4CAAH,wDA2CnBqC,EAAiB,iDAAG,qHAC/BI,QAAQC,IAAI,wBACRqE,GAAO,IAAInB,aAAcE,OAAOkB,KAChC0C,EAAc1P,EAAOC,KAAK8M,GAAM7M,SAAS,UAHd,SAMH4J,IACzB6F,wBACAC,WAAWF,GACXG,OAAO,QACPC,SAASA,KACT9F,KAX4B,OAM3B+F,EAN2B,OAY3B/H,EAAW,GAZgB,cAaL+H,EAAgBC,cAbX,6DAapBC,EAboB,UAczBjK,EAAQiK,EAAY,8BAdK,kCAiBPC,EAAelK,GAjBR,SAiBvBJ,EAjBuB,SAmBzBoC,EAASmI,KAAKvK,GAnBW,uJAuB/B6C,QAAQC,IAAI,qBAvBmB,kBAwBxBV,GAxBwB,gEAAH,qDA2BxBkI,EAAc,iDAAG,WAAOlK,GAAP,gIAGE8D,IAClBsG,mBAAmBpK,GACnBqK,YAAW,GACXrG,KANgB,YAGfC,EAHe,QAONqG,YAAYC,QAPN,yCAQV,MARU,cAUfC,EAAcvG,EAASqG,YAAYhE,OAAO,gBAG1CrG,EAAQgE,EAASqG,YAAYhE,OAAOmE,QACpCtP,EAAO,GACP0C,EAAQ,GACRE,EAAc,GACdE,EAAQ,EACR8B,EAAO,EAEL2K,EAAW,SAACC,EAAWH,GAC3B,OAAOA,EAAYI,MAAK,SAACC,GACvB,OAAOA,EAAMC,MAAQ3Q,YAAmBwQ,EACzC,GACF,OAEqCI,IAAlCL,EAAS,OAAQF,KACfQ,EAAQN,EAAS,OAAQF,GAAajL,MAAM0L,MAChD9P,EAAOrB,YAAmBkR,SAGWD,IAAnCL,EAAS,QAASF,KAChBQ,EAAQN,EAAS,QAASF,GAAajL,MAAM0L,MACjDpN,EAAQ/D,YAAmBkR,SAGgBD,IAAzCL,EAAS,cAAeF,KACtBQ,EAAQN,EAAS,cAAeF,GAAajL,MAAM0L,MACvDlN,EAAcjE,YAAmBkR,SAGID,IAAnCL,EAAS,QAASF,KACpBvM,EAAQyM,EAAS,QAASF,GAAajL,MAAM2L,WAGTH,IAAlCL,EAAS,OAAQF,KACnBzK,EAAO2K,EAAS,OAAQF,GAAajL,MAAM2L,MA9C1B,kBAiDZ,IAAIvL,EAAQxE,EAAM0C,EAAOE,EAAaE,EAAO8B,EAAMC,EAAOC,IAjD9C,2DAmDZ,MAnDY,0DAAH,qD,2DCxOpB,2XAGMkL,EACQ,GADRA,EAES,0CAFTA,EAGO,GAHPA,EAIU,GAJVA,EAKW,iDALXA,EAMS,GAGFpF,EAAc,IAAIS,IAAQ4E,QACrCD,EACAA,EACAA,GAGWrH,EAAgB,IAAI0C,IAAQ6E,QACvCF,EACAA,EACAA,GAGW9G,EAAgB,IAAIiH,IAGpBxB,EAAW,SAGX9C,EAAkB,2BAGlBS,EAAe,EACfE,EAAgB,EAEhBC,EAAgB,EAChBE,EAAiB,EAEjBjN,EAAoB,C","file":"static/js/main.256a9146.chunk.js","sourcesContent":["export default \"#pragma version 6\\r\\ntxn ApplicationID\\r\\nint 0\\r\\n==\\r\\nbnz main_l8\\r\\ntxn OnCompletion\\r\\nint DeleteApplication\\r\\n==\\r\\nbnz main_l7\\r\\ntxna ApplicationArgs 0\\r\\nbyte \\\"buy\\\"\\r\\n==\\r\\nbnz main_l4\\r\\nerr\\r\\nmain_l4:\\r\\nglobal GroupSize\\r\\nint 2\\r\\n==\\r\\ngtxn 1 TypeEnum\\r\\nint pay\\r\\n==\\r\\ngtxn 1 Receiver\\r\\nglobal CreatorAddress\\r\\n==\\r\\n&&\\r\\ngtxn 1 Amount\\r\\nbyte \\\"PRICE\\\"\\r\\napp_global_get\\r\\ntxna ApplicationArgs 1\\r\\nbtoi\\r\\n*\\r\\n==\\r\\n&&\\r\\ngtxn 1 Sender\\r\\ngtxn 0 Sender\\r\\n==\\r\\n&&\\r\\n&&\\r\\nbnz main_l6\\r\\nint 0\\r\\nreturn\\r\\nmain_l6:\\r\\nbyte \\\"SOLD\\\"\\r\\nbyte \\\"SOLD\\\"\\r\\napp_global_get\\r\\ntxna ApplicationArgs 1\\r\\nbtoi\\r\\n+\\r\\napp_global_put\\r\\nint 1\\r\\nreturn\\r\\nmain_l7:\\r\\ntxn Sender\\r\\nglobal CreatorAddress\\r\\n==\\r\\nreturn\\r\\nmain_l8:\\r\\ntxn NumAppArgs\\r\\nint 4\\r\\n==\\r\\nassert\\r\\ntxn Note\\r\\nbyte \\\"tutorial-marketplace:uv1\\\"\\r\\n==\\r\\nassert\\r\\ntxna ApplicationArgs 3\\r\\nbtoi\\r\\nint 0\\r\\n>\\r\\nassert\\r\\nbyte \\\"NAME\\\"\\r\\ntxna ApplicationArgs 0\\r\\napp_global_put\\r\\nbyte \\\"IMAGE\\\"\\r\\ntxna ApplicationArgs 1\\r\\napp_global_put\\r\\nbyte \\\"DESCRIPTION\\\"\\r\\ntxna ApplicationArgs 2\\r\\napp_global_put\\r\\nbyte \\\"PRICE\\\"\\r\\ntxna ApplicationArgs 3\\r\\nbtoi\\r\\napp_global_put\\r\\nbyte \\\"SOLD\\\"\\r\\nint 0\\r\\napp_global_put\\r\\nint 1\\r\\nreturn\";","export default \"#pragma version 6\\r\\nint 1\\r\\nreturn\";","import { ALGORAND_DECIMALS } from \"./constants\";\r\nimport BigNumber from \"bignumber.js\";\r\n\r\nexport const base64ToUTF8String = (base64String) => {\r\n  return Buffer.from(base64String, \"base64\").toString(\"utf-8\");\r\n};\r\n\r\nexport const utf8ToBase64String = (utf8String) => {\r\n  return Buffer.from(utf8String, \"utf8\").toString(\"base64\");\r\n};\r\n\r\n// Truncate is done in the middle to allow for checking of first and last chars simply to ensure correct address\r\nexport const truncateAddress = (address) => {\r\n  if (!address) return;\r\n  return (\r\n    address.slice(0, 5) +\r\n    \"...\" +\r\n    address.slice(address.length - 5, address.length)\r\n  );\r\n};\r\n\r\n// Amounts in microAlgos (e.g. 10500) are shown as algos (e.g. 10.5) in the frontend\r\nexport const microAlgosToString = (num) => {\r\n  if (!num) return;\r\n  let bigNumber = new BigNumber(num);\r\n  return bigNumber.shiftedBy(-ALGORAND_DECIMALS).toFixed(3);\r\n};\r\n\r\n// Convert an amount entered as algos (e.g. 10.5) to microAlgos (e.g. 10500)\r\nexport const stringToMicroAlgos = (str) => {\r\n  if (!str) return;\r\n  let bigNumber = new BigNumber(str);\r\n  return bigNumber.shiftedBy(ALGORAND_DECIMALS).toNumber();\r\n};\r\n","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Cover = ({ name, coverImg, connect }) => {\r\n  return (\r\n    <div className=\"d-flex justify-content-center flex-column text-center bg-black min-vh-100\">\r\n      <div className=\"mt-auto text-light mb-5\">\r\n        <div\r\n          className=\" ratio ratio-1x1 mx-auto mb-2\"\r\n          style={{ maxWidth: \"320px\" }}\r\n        >\r\n          <img src={coverImg} alt=\"\" />\r\n        </div>\r\n        <h1>{name}</h1>\r\n        <p>Please connect your wallet to continue.</p>\r\n        <Button\r\n          onClick={() => connect()}\r\n          variant=\"outline-light\"\r\n          className=\"rounded-pill px-3 mt-3\"\r\n        >\r\n          Connect Wallet\r\n        </Button>\r\n      </div>\r\n      <p className=\"mt-auto text-secondary\">Powered by Algorand</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nCover.propTypes = {\r\n  name: PropTypes.string,\r\n  coverImg: PropTypes.string,\r\n  connect: PropTypes.func,\r\n};\r\n\r\nexport default Cover;\r\n","import Jazzicon from \"react-jazzicon\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Identicon = ({ size, address, ...rest }) => (\r\n  <div {...rest} style={{ width: `${size}px`, height: `${size}px` }}>\r\n    <Jazzicon diameter={size} seed={parseInt(address.slice(2, 10), 16)} />\r\n  </div>\r\n);\r\n\r\nIdenticon.propTypes = {\r\n  size: PropTypes.number.isRequired,\r\n  address: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Identicon;\r\n","import React from \"react\";\r\nimport { Dropdown, Spinner, Stack } from \"react-bootstrap\";\r\nimport { microAlgosToString, truncateAddress } from \"../utils/conversions\";\r\nimport PropTypes from \"prop-types\";\r\nimport Identicon from \"./Identicon\";\r\n\r\nconst Wallet = ({ address, name, amount, symbol, disconnect }) => {\r\n  if (!address) {\r\n    return null;\r\n  }\r\n  return (\r\n    <>\r\n      <Dropdown>\r\n        <Dropdown.Toggle\r\n          variant=\"light\"\r\n          align=\"end\"\r\n          id=\"dropdown-basic\"\r\n          className=\"d-flex align-items-center border rounded-pill py-1\"\r\n        >\r\n          {amount ? (\r\n            <>\r\n              {microAlgosToString(amount)}\r\n              <span className=\"ms-1\"> {symbol}</span>\r\n            </>\r\n          ) : (\r\n            <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\" />\r\n          )}\r\n          <Identicon address={address} size={28} className=\"ms-2 me-1\" />\r\n        </Dropdown.Toggle>\r\n\r\n        <Dropdown.Menu className=\"shadow-lg border-0\">\r\n          <Dropdown.Item\r\n            href={`https://testnet.algoexplorer.io/address/${address}`}\r\n            target=\"_blank\"\r\n          >\r\n            <Stack direction=\"horizontal\" gap={2}>\r\n              <i className=\"bi bi-person-circle fs-4\" />\r\n              <div className=\"d-flex flex-column\">\r\n                {name && <span className=\"font-monospace\">{name}</span>}\r\n                <span className=\"font-monospace\">\r\n                  {truncateAddress(address)}\r\n                </span>\r\n              </div>\r\n            </Stack>\r\n          </Dropdown.Item>\r\n          <Dropdown.Divider />\r\n          <Dropdown.Item\r\n            as=\"button\"\r\n            className=\"d-flex align-items-center\"\r\n            onClick={() => {\r\n              disconnect();\r\n            }}\r\n          >\r\n            <i className=\"bi bi-box-arrow-right me-2 fs-4\" />\r\n            Disconnect\r\n          </Dropdown.Item>\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    </>\r\n  );\r\n};\r\n\r\nWallet.propTypes = {\r\n  address: PropTypes.string,\r\n  name: PropTypes.string,\r\n  amount: PropTypes.number,\r\n  symbol: PropTypes.string,\r\n  disconnect: PropTypes.func,\r\n};\r\n\r\nexport default Wallet;\r\n","import React, { useCallback, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, FloatingLabel, Form, Modal } from \"react-bootstrap\";\r\nimport { stringToMicroAlgos } from \"../../utils/conversions\";\r\n\r\nconst AddProduct = ({ createProduct }) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [image, setImage] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [price, setPrice] = useState(0);\r\n\r\n  const isFormFilled = useCallback(() => {\r\n    return name && image && description && price > 0;\r\n  }, [name, image, description, price]);\r\n\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n  return (\r\n    <>\r\n      <Button\r\n        onClick={handleShow}\r\n        variant=\"dark\"\r\n        className=\"rounded-pill px-0\"\r\n        style={{ width: \"38px\" }}\r\n      >\r\n        <i className=\"bi bi-plus\"></i>\r\n      </Button>\r\n      <Modal show={show} onHide={handleClose} centered>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>New Product</Modal.Title>\r\n        </Modal.Header>\r\n        <Form>\r\n          <Modal.Body>\r\n            <FloatingLabel\r\n              controlId=\"inputName\"\r\n              label=\"Product name\"\r\n              className=\"mb-3\"\r\n            >\r\n              <Form.Control\r\n                type=\"text\"\r\n                onChange={(e) => {\r\n                  setName(e.target.value);\r\n                }}\r\n                placeholder=\"Enter name of product\"\r\n              />\r\n            </FloatingLabel>\r\n            <FloatingLabel\r\n              controlId=\"inputUrl\"\r\n              label=\"Image URL\"\r\n              className=\"mb-3\"\r\n            >\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Image URL\"\r\n                value={image}\r\n                onChange={(e) => {\r\n                  setImage(e.target.value);\r\n                }}\r\n              />\r\n            </FloatingLabel>\r\n            <FloatingLabel\r\n              controlId=\"inputDescription\"\r\n              label=\"Description\"\r\n              className=\"mb-3\"\r\n            >\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                placeholder=\"description\"\r\n                style={{ height: \"80px\" }}\r\n                onChange={(e) => {\r\n                  setDescription(e.target.value);\r\n                }}\r\n              />\r\n            </FloatingLabel>\r\n            <FloatingLabel\r\n              controlId=\"inputPrice\"\r\n              label=\"Price in ALGO\"\r\n              className=\"mb-3\"\r\n            >\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Price\"\r\n                onChange={(e) => {\r\n                  setPrice(stringToMicroAlgos(e.target.value));\r\n                }}\r\n              />\r\n            </FloatingLabel>\r\n          </Modal.Body>\r\n        </Form>\r\n        <Modal.Footer>\r\n          <Button variant=\"outline-secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button\r\n            variant=\"dark\"\r\n            disabled={!isFormFilled()}\r\n            onClick={() => {\r\n              createProduct({\r\n                name,\r\n                image,\r\n                description,\r\n                price,\r\n              });\r\n              handleClose();\r\n            }}\r\n          >\r\n            Save product\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nAddProduct.propTypes = {\r\n  createProduct: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddProduct;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  Badge,\r\n  Button,\r\n  Card,\r\n  Col,\r\n  FloatingLabel,\r\n  Form,\r\n  Stack,\r\n} from \"react-bootstrap\";\r\nimport { microAlgosToString, truncateAddress } from \"../../utils/conversions\";\r\nimport Identicon from \"../Identicon\";\r\n\r\nconst Product = ({ address, product, buyProduct, deleteProduct }) => {\r\n  const { name, image, description, price, sold, appId, owner } = product;\r\n\r\n  const [count, setCount] = useState(1);\r\n\r\n  return (\r\n    <Col key={appId}>\r\n      <Card className=\"h-100\">\r\n        <Card.Header>\r\n          <Stack direction=\"horizontal\" gap={2}>\r\n            <span className=\"font-monospace text-secondary\">\r\n              {truncateAddress(owner)}\r\n            </span>\r\n            <Identicon size={28} address={owner} />\r\n            <Badge bg=\"secondary\" className=\"ms-auto\">\r\n              {sold} Sold\r\n            </Badge>\r\n          </Stack>\r\n        </Card.Header>\r\n        <div className=\"ratio ratio-4x3\">\r\n          <img src={image} alt={name} style={{ objectFit: \"cover\" }} />\r\n        </div>\r\n        <Card.Body className=\"d-flex flex-column text-center\">\r\n          <Card.Title>{name}</Card.Title>\r\n          <Card.Text className=\"flex-grow-1\">{description}</Card.Text>\r\n          <Form className=\"d-flex align-content-stretch flex-row gap-2\">\r\n            <FloatingLabel\r\n              controlId=\"inputCount\"\r\n              label=\"Count\"\r\n              className=\"w-25\"\r\n            >\r\n              <Form.Control\r\n                type=\"number\"\r\n                value={count}\r\n                min=\"1\"\r\n                max=\"10\"\r\n                onChange={(e) => {\r\n                  setCount(Number(e.target.value));\r\n                }}\r\n              />\r\n            </FloatingLabel>\r\n            <Button\r\n              variant=\"outline-dark\"\r\n              onClick={() => buyProduct(product, count)}\r\n              className=\"w-75 py-3\"\r\n            >\r\n              Buy for {microAlgosToString(price) * count} ALGO\r\n            </Button>\r\n            {product.owner === address && (\r\n              <Button\r\n                variant=\"outline-danger\"\r\n                onClick={() => deleteProduct(product)}\r\n                className=\"btn\"\r\n              >\r\n                <i className=\"bi bi-trash\"></i>\r\n              </Button>\r\n            )}\r\n          </Form>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n  );\r\n};\r\n\r\nProduct.propTypes = {\r\n  address: PropTypes.string.isRequired,\r\n  product: PropTypes.instanceOf(Object).isRequired,\r\n  buyProduct: PropTypes.func.isRequired,\r\n  deleteProduct: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Product;\r\n","import React from \"react\";\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\nconst Loader = () => (\r\n  <div className=\"d-flex justify-content-center\">\r\n    <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\r\n      <span className=\"visually-hidden\">Loading...</span>\r\n    </Spinner>\r\n  </div>\r\n);\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Notification = () => (\r\n  <ToastContainer\r\n    position=\"bottom-center\"\r\n    autoClose={5000}\r\n    hideProgressBar\r\n    newestOnTop\r\n    closeOnClick\r\n    rtl={false}\r\n    pauseOnFocusLoss\r\n    draggable={false}\r\n    pauseOnHover\r\n  />\r\n);\r\n\r\nconst NotificationSuccess = ({ text }) => (\r\n  <div>\r\n    <i className=\"bi bi-check-circle-fill text-success mx-2\" />\r\n    <span className=\"text-secondary mx-1\">{text}</span>\r\n  </div>\r\n);\r\n\r\nconst NotificationError = ({ text }) => (\r\n  <div>\r\n    <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\r\n    <span className=\"text-secondary mx-1\">{text}</span>\r\n  </div>\r\n);\r\n\r\nconst Props = {\r\n  text: PropTypes.string,\r\n};\r\n\r\nconst DefaultProps = {\r\n  text: \"\",\r\n};\r\n\r\nNotificationSuccess.propTypes = Props;\r\nNotificationSuccess.defaultProps = DefaultProps;\r\n\r\nNotificationError.propTypes = Props;\r\nNotificationError.defaultProps = DefaultProps;\r\n\r\nexport { Notification, NotificationSuccess, NotificationError };\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport AddProduct from \"./AddProduct\";\r\nimport Product from \"./Product\";\r\nimport Loader from \"../utils/Loader\";\r\nimport { NotificationError, NotificationSuccess } from \"../utils/Notifications\";\r\nimport {\r\n  buyProductAction,\r\n  createProductAction,\r\n  deleteProductAction,\r\n  getProductsAction,\r\n} from \"../../utils/marketplace\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Row } from \"react-bootstrap\";\r\n\r\nconst Products = ({ address, fetchBalance }) => {\r\n  const [products, setProducts] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const getProducts = async () => {\r\n    setLoading(true);\r\n    getProductsAction()\r\n      .then((products) => {\r\n        if (products) {\r\n          setProducts(products);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      })\r\n      .finally((_) => {\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getProducts();\r\n  }, []);\r\n\r\n  const createProduct = async (data) => {\r\n    setLoading(true);\r\n    createProductAction(address, data)\r\n      .then(() => {\r\n        toast(<NotificationSuccess text=\"Product added successfully.\" />);\r\n        getProducts();\r\n        fetchBalance(address);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        toast(<NotificationError text=\"Failed to create a product.\" />);\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  const buyProduct = async (product, count) => {\r\n    setLoading(true);\r\n    buyProductAction(address, product, count)\r\n      .then(() => {\r\n        toast(<NotificationSuccess text=\"Product bought successfully\" />);\r\n        getProducts();\r\n        fetchBalance(address);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        toast(<NotificationError text=\"Failed to purchase product.\" />);\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  const deleteProduct = async (product) => {\r\n    setLoading(true);\r\n    deleteProductAction(address, product.appId)\r\n      .then(() => {\r\n        toast(<NotificationSuccess text=\"Product deleted successfully\" />);\r\n        getProducts();\r\n        fetchBalance(address);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        toast(<NotificationError text=\"Failed to delete product.\" />);\r\n        setLoading(false);\r\n      });\r\n  };\r\n  if (loading) {\r\n    return <Loader />;\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n        <h1 className=\"fs-4 fw-bold mb-0\">Street Food</h1>\r\n        <AddProduct createProduct={createProduct} />\r\n      </div>\r\n      <Row xs={1} sm={2} lg={3} className=\"g-3 mb-5 g-xl-4 g-xxl-5\">\r\n        <>\r\n          {products.map((product, index) => (\r\n            <Product\r\n              address={address}\r\n              product={product}\r\n              buyProduct={buyProduct}\r\n              deleteProduct={deleteProduct}\r\n              key={index}\r\n            />\r\n          ))}\r\n        </>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nProducts.propTypes = {\r\n  address: PropTypes.string.isRequired,\r\n  fetchBalance: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Products;\r\n","export default __webpack_public_path__ + \"static/media/sandwich.2d312449.jpg\";","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Cover from \"./components/Cover\";\r\nimport \"./App.css\";\r\nimport Wallet from \"./components/Wallet\";\r\nimport { Container, Nav } from \"react-bootstrap\";\r\nimport Products from \"./components/marketplace/Products\";\r\nimport { Notification } from \"./components/utils/Notifications\";\r\nimport { indexerClient, myAlgoConnect } from \"./utils/constants\";\r\nimport coverImg from \"./assets/img/sandwich.jpg\";\r\n\r\nconst App = function AppWrapper() {\r\n  const [address, setAddress] = useState(null);\r\n  const [name, setName] = useState(null);\r\n  const [balance, setBalance] = useState(0);\r\n\r\n  const fetchBalance = async (accountAddress) => {\r\n    indexerClient\r\n      .lookupAccountByID(accountAddress)\r\n      .do()\r\n      .then((response) => {\r\n        const _balance = response.account.amount;\r\n        setBalance(_balance);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const connectWallet = async () => {\r\n    myAlgoConnect\r\n      .connect()\r\n      .then((accounts) => {\r\n        const _account = accounts[0];\r\n        setAddress(_account.address);\r\n        setName(_account.name);\r\n        fetchBalance(_account.address);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Could not connect to MyAlgo wallet\");\r\n        console.error(error);\r\n      });\r\n  };\r\n\r\n  const disconnect = () => {\r\n    setAddress(null);\r\n    setName(null);\r\n    setBalance(null);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Notification />\r\n      {address ? (\r\n        <Container fluid=\"md\">\r\n          <Nav className=\"justify-content-end pt-3 pb-5\">\r\n            <Nav.Item>\r\n              <Wallet\r\n                address={address}\r\n                name={name}\r\n                amount={balance}\r\n                disconnect={disconnect}\r\n                symbol={\"ALGO\"}\r\n              />\r\n            </Nav.Item>\r\n          </Nav>\r\n          <main>\r\n            <Products address={address} fetchBalance={fetchBalance} />\r\n          </main>\r\n        </Container>\r\n      ) : (\r\n        <Cover\r\n          name={\"Street Food\"}\r\n          coverImg={coverImg}\r\n          connect={connectWallet}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"react-toastify/dist/ReactToastify.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import algosdk from \"algosdk\";\r\nimport {\r\n  algodClient,\r\n  indexerClient,\r\n  marketplaceNote,\r\n  minRound,\r\n  myAlgoConnect,\r\n  numGlobalBytes,\r\n  numGlobalInts,\r\n  numLocalBytes,\r\n  numLocalInts,\r\n} from \"./constants\";\r\n/* eslint import/no-webpack-loader-syntax: off */\r\nimport approvalProgram from \"!!raw-loader!../contracts/marketplace_approval.teal\";\r\nimport clearProgram from \"!!raw-loader!../contracts/marketplace_clear.teal\";\r\nimport { base64ToUTF8String, utf8ToBase64String } from \"./conversions\";\r\n\r\nclass Product {\r\n  constructor(name, image, description, price, sold, appId, owner) {\r\n    this.name = name;\r\n    this.image = image;\r\n    this.description = description;\r\n    this.price = price;\r\n    this.sold = sold;\r\n    this.appId = appId;\r\n    this.owner = owner;\r\n  }\r\n}\r\n\r\n//...\r\n// Compile smart contract in .teal format to program\r\nconst compileProgram = async (programSource) => {\r\n  let encoder = new TextEncoder();\r\n  let programBytes = encoder.encode(programSource);\r\n  let compileResponse = await algodClient.compile(programBytes).do();\r\n  return new Uint8Array(Buffer.from(compileResponse.result, \"base64\"));\r\n};\r\n\r\n// CREATE PRODUCT: ApplicationCreateTxn\r\nexport const createProductAction = async (senderAddress, product) => {\r\n  console.log(\"Adding product...\");\r\n\r\n  let params = await algodClient.getTransactionParams().do();\r\n  params.fee = algosdk.ALGORAND_MIN_TX_FEE;\r\n  params.flatFee = true;\r\n\r\n  // Compile programs\r\n  const compiledApprovalProgram = await compileProgram(approvalProgram);\r\n  const compiledClearProgram = await compileProgram(clearProgram);\r\n\r\n  // Build note to identify transaction later and required app args as Uint8Arrays\r\n  let note = new TextEncoder().encode(marketplaceNote);\r\n  let name = new TextEncoder().encode(product.name);\r\n  let image = new TextEncoder().encode(product.image);\r\n  let description = new TextEncoder().encode(product.description);\r\n  let price = algosdk.encodeUint64(product.price);\r\n\r\n  let appArgs = [name, image, description, price];\r\n\r\n  // Create ApplicationCreateTxn\r\n  let txn = algosdk.makeApplicationCreateTxnFromObject({\r\n    from: senderAddress,\r\n    suggestedParams: params,\r\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\r\n    approvalProgram: compiledApprovalProgram,\r\n    clearProgram: compiledClearProgram,\r\n    numLocalInts: numLocalInts,\r\n    numLocalByteSlices: numLocalBytes,\r\n    numGlobalInts: numGlobalInts,\r\n    numGlobalByteSlices: numGlobalBytes,\r\n    note: note,\r\n    appArgs: appArgs,\r\n  });\r\n\r\n  // Get transaction ID\r\n  let txId = txn.txID().toString();\r\n\r\n  // Sign & submit the transaction\r\n  let signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\r\n  console.log(\"Signed transaction with txID: %s\", txId);\r\n  await algodClient.sendRawTransaction(signedTxn.blob).do();\r\n\r\n  // Wait for transaction to be confirmed\r\n  let confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\r\n\r\n  // Get the completed Transaction\r\n  console.log(\r\n    \"Transaction \" +\r\n      txId +\r\n      \" confirmed in round \" +\r\n      confirmedTxn[\"confirmed-round\"]\r\n  );\r\n\r\n  // Get created application id and notify about completion\r\n  let transactionResponse = await algodClient\r\n    .pendingTransactionInformation(txId)\r\n    .do();\r\n  let appId = transactionResponse[\"application-index\"];\r\n  console.log(\"Created new app-id: \", appId);\r\n  return appId;\r\n};\r\n\r\n//...\r\n// BUY PRODUCT: Group transaction consisting of ApplicationCallTxn and PaymentTxn\r\nexport const buyProductAction = async (senderAddress, product, count) => {\r\n  console.log(\"Buying product...\");\r\n\r\n  let params = await algodClient.getTransactionParams().do();\r\n  params.fee = algosdk.ALGORAND_MIN_TX_FEE;\r\n  params.flatFee = true;\r\n\r\n  // Build required app args as Uint8Array\r\n  let buyArg = new TextEncoder().encode(\"buy\");\r\n  let countArg = algosdk.encodeUint64(count);\r\n  let appArgs = [buyArg, countArg];\r\n\r\n  // Create ApplicationCallTxn\r\n  let appCallTxn = algosdk.makeApplicationCallTxnFromObject({\r\n    from: senderAddress,\r\n    appIndex: product.appId,\r\n    onComplete: algosdk.OnApplicationComplete.NoOpOC,\r\n    suggestedParams: params,\r\n    appArgs: appArgs,\r\n  });\r\n\r\n  // Create PaymentTxn\r\n  let paymentTxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n    from: senderAddress,\r\n    to: product.owner,\r\n    amount: product.price * count,\r\n    suggestedParams: params,\r\n  });\r\n\r\n  let txnArray = [appCallTxn, paymentTxn];\r\n\r\n  // Create group transaction out of previously build transactions\r\n  let groupID = algosdk.computeGroupID(txnArray);\r\n  for (let i = 0; i < 2; i++) txnArray[i].group = groupID;\r\n\r\n  // Sign & submit the group transaction\r\n  let signedTxn = await myAlgoConnect.signTransaction(\r\n    txnArray.map((txn) => txn.toByte())\r\n  );\r\n  console.log(\"Signed group transaction\");\r\n  let tx = await algodClient\r\n    .sendRawTransaction(signedTxn.map((txn) => txn.blob))\r\n    .do();\r\n\r\n  // Wait for group transaction to be confirmed\r\n  let confirmedTxn = await algosdk.waitForConfirmation(algodClient, tx.txId, 4);\r\n\r\n  // Notify about completion\r\n  console.log(\r\n    \"Group transaction \" +\r\n      tx.txId +\r\n      \" confirmed in round \" +\r\n      confirmedTxn[\"confirmed-round\"]\r\n  );\r\n};\r\n\r\n//...\r\n// DELETE PRODUCT: ApplicationDeleteTxn\r\nexport const deleteProductAction = async (senderAddress, index) => {\r\n  console.log(\"Deleting application...\");\r\n\r\n  let params = await algodClient.getTransactionParams().do();\r\n  params.fee = algosdk.ALGORAND_MIN_TX_FEE;\r\n  params.flatFee = true;\r\n\r\n  // Create ApplicationDeleteTxn\r\n  let txn = algosdk.makeApplicationDeleteTxnFromObject({\r\n    from: senderAddress,\r\n    suggestedParams: params,\r\n    appIndex: index,\r\n  });\r\n\r\n  // Get transaction ID\r\n  let txId = txn.txID().toString();\r\n\r\n  // Sign & submit the transaction\r\n  let signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\r\n  console.log(\"Signed transaction with txID: %s\", txId);\r\n  await algodClient.sendRawTransaction(signedTxn.blob).do();\r\n\r\n  // Wait for transaction to be confirmed\r\n  const confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\r\n\r\n  // Get the completed Transaction\r\n  console.log(\r\n    \"Transaction \" +\r\n      txId +\r\n      \" confirmed in round \" +\r\n      confirmedTxn[\"confirmed-round\"]\r\n  );\r\n\r\n  // Get application id of deleted application and notify about completion\r\n  let transactionResponse = await algodClient\r\n    .pendingTransactionInformation(txId)\r\n    .do();\r\n  let appId = transactionResponse[\"txn\"][\"txn\"].apid;\r\n  console.log(\"Deleted app-id: \", appId);\r\n};\r\n\r\n//...\r\n// GET PRODUCTS: Use indexer\r\nexport const getProductsAction = async () => {\r\n  console.log(\"Fetching products...\");\r\n  let note = new TextEncoder().encode(marketplaceNote);\r\n  let encodedNote = Buffer.from(note).toString(\"base64\");\r\n\r\n  // Step 1: Get all transactions by notePrefix (+ minRound filter for performance)\r\n  let transactionInfo = await indexerClient\r\n    .searchForTransactions()\r\n    .notePrefix(encodedNote)\r\n    .txType(\"appl\")\r\n    .minRound(minRound)\r\n    .do();\r\n  let products = [];\r\n  for (const transaction of transactionInfo.transactions) {\r\n    let appId = transaction[\"created-application-index\"];\r\n    if (appId) {\r\n      // Step 2: Get each application by application id\r\n      let product = await getApplication(appId);\r\n      if (product) {\r\n        products.push(product);\r\n      }\r\n    }\r\n  }\r\n  console.log(\"Products fetched.\");\r\n  return products;\r\n};\r\n\r\nconst getApplication = async (appId) => {\r\n  try {\r\n    // 1. Get application by appId\r\n    let response = await indexerClient\r\n      .lookupApplications(appId)\r\n      .includeAll(true)\r\n      .do();\r\n    if (response.application.deleted) {\r\n      return null;\r\n    }\r\n    let globalState = response.application.params[\"global-state\"];\r\n\r\n    // 2. Parse fields of response and return product\r\n    let owner = response.application.params.creator;\r\n    let name = \"\";\r\n    let image = \"\";\r\n    let description = \"\";\r\n    let price = 0;\r\n    let sold = 0;\r\n\r\n    const getField = (fieldName, globalState) => {\r\n      return globalState.find((state) => {\r\n        return state.key === utf8ToBase64String(fieldName);\r\n      });\r\n    };\r\n\r\n    if (getField(\"NAME\", globalState) !== undefined) {\r\n      let field = getField(\"NAME\", globalState).value.bytes;\r\n      name = base64ToUTF8String(field);\r\n    }\r\n\r\n    if (getField(\"IMAGE\", globalState) !== undefined) {\r\n      let field = getField(\"IMAGE\", globalState).value.bytes;\r\n      image = base64ToUTF8String(field);\r\n    }\r\n\r\n    if (getField(\"DESCRIPTION\", globalState) !== undefined) {\r\n      let field = getField(\"DESCRIPTION\", globalState).value.bytes;\r\n      description = base64ToUTF8String(field);\r\n    }\r\n\r\n    if (getField(\"PRICE\", globalState) !== undefined) {\r\n      price = getField(\"PRICE\", globalState).value.uint;\r\n    }\r\n\r\n    if (getField(\"SOLD\", globalState) !== undefined) {\r\n      sold = getField(\"SOLD\", globalState).value.uint;\r\n    }\r\n\r\n    return new Product(name, image, description, price, sold, appId, owner);\r\n  } catch (err) {\r\n    return null;\r\n  }\r\n};\r\n","import algosdk from \"algosdk\";\r\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\r\n\r\nconst config = {\r\n  algodToken: \"\",\r\n  algodServer: \"https://node.testnet.algoexplorerapi.io\",\r\n  algodPort: \"\",\r\n  indexerToken: \"\",\r\n  indexerServer: \"https://algoindexer.testnet.algoexplorerapi.io\",\r\n  indexerPort: \"\",\r\n};\r\n\r\nexport const algodClient = new algosdk.Algodv2(\r\n  config.algodToken,\r\n  config.algodServer,\r\n  config.algodPort\r\n);\r\n\r\nexport const indexerClient = new algosdk.Indexer(\r\n  config.indexerToken,\r\n  config.indexerServer,\r\n  config.indexerPort\r\n);\r\n\r\nexport const myAlgoConnect = new MyAlgoConnect();\r\n\r\n// ...\r\nexport const minRound = 21540981;\r\n\r\n// https://github.com/algorandfoundation/ARCs/blob/main/ARCs/arc-0002.md\r\nexport const marketplaceNote = \"tutorial-marketplace:uv1\";\r\n\r\n// Maximum local storage allocation, immutable\r\nexport const numLocalInts = 0;\r\nexport const numLocalBytes = 0;\r\n// Maximum global storage allocation, immutable\r\nexport const numGlobalInts = 2; // Global variables stored as Int: count, sold\r\nexport const numGlobalBytes = 3; // Global variables stored as Bytes: name, description, image\r\n//...\r\nexport const ALGORAND_DECIMALS = 6;\r\n"],"sourceRoot":""}